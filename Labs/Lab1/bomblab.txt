I am not part of the problem. I am a Republican.
0 1 1 2 3 5
0 347
14 7 DrEvil
5 115
3 6 5 1 2 4
35












secret phase
----------------------------------------------------------------------------------------------------------------------------



   0x0000000000400eeb <+0>:     push   %rbx
   0x0000000000400eec <+1>:     callq  0x4014f5 <read_line>
   0x0000000000400ef1 <+6>:     mov    $0xa,%edx
   0x0000000000400ef6 <+11>:    mov    $0x0,%esi
   0x0000000000400efb <+16>:    mov    %rax,%rdi
   0x0000000000400efe <+19>:    callq  0x400b78 <strtol@plt>
   0x0000000000400f03 <+24>:    mov    %eax,%ebx
   0x0000000000400f05 <+26>:    lea    -0x1(%rbx),%eax
   0x0000000000400f08 <+29>:    cmp    $0x3e8,%eax
   0x0000000000400f0d <+34>:    jbe    0x400f14 <secret_phase+41>
   0x0000000000400f0f <+36>:    callq  0x4013ff <explode_bomb>
   0x0000000000400f14 <+41>:    mov    %ebx,%esi
   0x0000000000400f16 <+43>:    mov    $0x6034e0,%edi
   0x0000000000400f1b <+48>:    callq  0x400eaf <fun7>
   0x0000000000400f20 <+53>:    cmp    $0x6,%eax
   0x0000000000400f23 <+56>:    je     0x400f2a <secret_phase+63>
   0x0000000000400f25 <+58>:    callq  0x4013ff <explode_bomb>
   0x0000000000400f2a <+63>:    mov    $0x4023a0,%edi
   0x0000000000400f2f <+68>:    callq  0x400ab8 <puts@plt>
   0x0000000000400f34 <+73>:    callq  0x401376 <phase_defused>
   0x0000000000400f39 <+78>:    pop    %rbx
   0x0000000000400f3a <+79>:    retq  


--------------fun7----------------------------------------

esi is node1

   0x0000000000400eaf <+0>:     sub    $0x8,%rsp
   0x0000000000400eb3 <+4>:     mov    $0xffffffff,%eax
   0x0000000000400eb8 <+9>:     test   %rdi,%rdi		;if input = 0, finish
   0x0000000000400ebb <+12>:    je     0x400ee6 <fun7+55>

   0x0000000000400ebd <+14>:    mov    (%rdi),%edx		;edx = input
   0x0000000000400ebf <+16>:    cmp    %esi,%edx
   0x0000000000400ec1 <+18>:    jle    0x400ed0 <fun7+33>	;if edx <= esi, go to +33

   0x0000000000400ec3 <+20>:    mov    0x8(%rdi),%rdi		;if edx > esi, move right
   0x0000000000400ec7 <+24>:    callq  0x400eaf <fun7>
   0x0000000000400ecc <+29>:    add    %eax,%eax
   0x0000000000400ece <+31>:    jmp    0x400ee6 <fun7+55>

   0x0000000000400ed0 <+33>:    mov    $0x0,%eax
   0x0000000000400ed5 <+38>:    cmp    %esi,%edx
   0x0000000000400ed7 <+40>:    je     0x400ee6 <fun7+55>	;if esi = edx, finish. else move left

   0x0000000000400ed9 <+42>:    mov    0x10(%rdi),%rdi
   0x0000000000400edd <+46>:    callq  0x400eaf <fun7>
   0x0000000000400ee2 <+51>:    lea    0x1(%rax,%rax,1),%eax
   0x0000000000400ee6 <+55>:    add    $0x8,%rsp
   0x0000000000400eea <+59>:    retq  




----------------------------------------------------------------------------------------------------------------------------







Phase 6
----------------------------------------------------------------------------------------------------------------------------
rbp = stack base pointer
rbx = general purpose
rsp = stack pointer
rsi = source index pointer







-------------------allocate/save memory---------------------------
   0x0000000000400f3b <+0>:     push   %r13				;save registers
   0x0000000000400f3d <+2>:     push   %r12
   0x0000000000400f3f <+4>:     push   %rbp
   0x0000000000400f40 <+5>:     push   %rbx
   0x0000000000400f41 <+6>:     sub    $0x58,%rsp			;allocate 88 bytes




   0x0000000000400f45 <+10>:    lea    0x30(%rsp),%r12			;r12 = &(rsp + 48)
   0x0000000000400f4a <+15>:    mov    %r12,%rsi			;source index = r12
   0x0000000000400f4d <+18>:    callq  0x401435 <read_six_numbers>
   0x0000000000400f52 <+23>:    mov    %r12,%rbp			;rbp = r12
   0x0000000000400f55 <+26>:    mov    $0x0,%r13d			;r13d (4bytes) = 0
loop1
   0x0000000000400f5b <+32>:    mov    0x0(%rbp),%eax			;eax = rbp + 0
   0x0000000000400f5e <+35>:    sub    $0x1,%eax			;eax - 1
   0x0000000000400f61 <+38>:    cmp    $0x5,%eax			;if eax uns <= 5, NO BOOM
   0x0000000000400f64 <+41>:    jbe    0x400f6b <phase_6+48>		; (enough numbers input)
--------------------------------------------------------------------
   0x0000000000400f66 <+43>:    callq  0x4013ff <explode_bomb>
   0x0000000000400f6b <+48>:    add    $0x1,%r13d			;r13d + 1
   0x0000000000400f6f <+52>:    cmp    $0x6,%r13d			;if r13d = 6, go to +92
   0x0000000000400f73 <+56>:    je     0x400f97 <phase_6+92>
   0x0000000000400f75 <+58>:    mov    %r13d,%ebx			;ebx = r13d
loop2
   0x0000000000400f78 <+61>:    movslq %ebx,%rax			;rax = sign extended ebx
   0x0000000000400f7b <+64>:    mov    0x0(%rbp),%edx			;edx = rbp
   0x0000000000400f7e <+67>:    cmp    0x30(%rsp,%rax,4),%edx		;if edx != (rsp + 4*rax + 30), NO BOOM
   0x0000000000400f82 <+71>:    jne    0x400f89 <phase_6+78>
---------------------------------------------------------------------
   0x0000000000400f84 <+73>:    callq  0x4013ff <explode_bomb>
   0x0000000000400f89 <+78>:    add    $0x1,%ebx			;ebx + 1
   0x0000000000400f8c <+81>:    cmp    $0x5,%ebx			;if ebx <= 5, go to +61
   0x0000000000400f8f <+84>:    jle    0x400f78 <phase_6+61>	
endloop2	
   0x0000000000400f91 <+86>:    add    $0x4,%rbp			;rbp + 4
   0x0000000000400f95 <+90>:    jmp    0x400f5b <phase_6+32>		;go to +32
endloop1

   0x0000000000400f97 <+92>:    lea    0x48(%rsp),%rcx			;rcx = &(rsp + 72)
   0x0000000000400f9c <+97>:    mov    $0x7,%edx			;edx = 7
loop3
   0x0000000000400fa1 <+102>:   mov    %edx,%eax			;eax = edx
   0x0000000000400fa3 <+104>:   sub    (%r12),%eax			;eax - val@r12
   0x0000000000400fa7 <+108>:   mov    %eax,(%r12)			;r12 = eax
   0x0000000000400fab <+112>:   add    $0x4,%r12			;r12 + 4
   0x0000000000400faf <+116>:   cmp    %rcx,%r12			;if r12 != rcx, go to +102
   0x0000000000400fb2 <+119>:   jne    0x400fa1 <phase_6+102>
endloop3


n = 7 - x
x = *n
x = x + 4









   0x0000000000400fb4 <+121>:   mov    $0x0,%ebx			;ebx = 0
   0x0000000000400fb9 <+126>:   lea    0x30(%rsp),%r8			;r8 = rsp + 48
   0x0000000000400fbe <+131>:   mov    $0x1,%ebp			;ebp = 1
   0x0000000000400fc3 <+136>:   mov    $0x603310,%esi			;esi = $0x603310 (linked list)
   0x0000000000400fc8 <+141>:   mov    %rsp,%rdi			;rdi = rsp

   0x0000000000400fcb <+144>:   jmp    0x400fe6 <phase_6+171>		;go to +171
loop4
   0x0000000000400fcd <+146>:   mov    0x8(%rdx),%rdx			;rdx = rdx + 8
   0x0000000000400fd1 <+150>:   add    $0x1,%eax			;eax + 1
   0x0000000000400fd4 <+153>:   cmp    %ecx,%eax			;if eax != ecx, go to +146
   0x0000000000400fd6 <+155>:   jne    0x400fcd <phase_6+146>
endloop4
loop5
   0x0000000000400fd8 <+157>:   mov    %rdx,(%rdi,%rbx,2)		;(rdi + rbx*2) = rdx
   0x0000000000400fdc <+161>:   add    $0x4,%rbx			;rbx + 4
   0x0000000000400fe0 <+165>:   cmp    $0x18,%rbx			;if rbx = 24, go to +187
   0x0000000000400fe4 <+169>:   je     0x400ff6 <phase_6+187>
   0x0000000000400fe6 <+171>:   mov    (%r8,%rbx,1),%ecx		;ecx = (r8 + rbx)
   0x0000000000400fea <+175>:   mov    %ebp,%eax			;eax = ebp
   0x0000000000400fec <+177>:   mov    %rsi,%rdx			;rdx = rsi
   0x0000000000400fef <+180>:   cmp    $0x1,%ecx			;if ecx > 1, go to +146
   0x0000000000400ff2 <+183>:   jg     0x400fcd <phase_6+146>
endloop4

   0x0000000000400ff4 <+185>:   jmp    0x400fd8 <phase_6+157>		;go to +157
endloop5
   0x0000000000400ff6 <+187>:   mov    (%rsp),%rbx			;rbx = rsp rbx is base
   0x0000000000400ffa <+191>:   mov    0x8(%rsp),%rax		;rax =rsp + 8 rax is next int
   0x0000000000400fff <+196>:   mov    %rax,0x8(%rbx)			;rbx + 8 = rax
   0x0000000000401003 <+200>:   mov    0x10(%rsp),%rdx		;rdx = rsp + 16
   0x0000000000401008 <+205>:   mov    %rdx,0x8(%rax)			;rax + 8 = rdx
   0x000000000040100c <+209>:   mov    0x18(%rsp),%rax		;rax = rsp + 24
   0x0000000000401011 <+214>:   mov    %rax,0x8(%rdx)			;rdx + 8 = rax
   0x0000000000401015 <+218>:   mov    0x20(%rsp),%rdx		;rdx = rsp + 32
   0x000000000040101a <+223>:   mov    %rdx,0x8(%rax)			;rax + 8 = rdx
   0x000000000040101e <+227>:   mov    0x28(%rsp),%rax		;rax = rsp + 40
   0x0000000000401023 <+232>:   mov    %rax,0x8(%rdx)			;rdx + 8 = rax
   0x0000000000401027 <+236>:   movq   $0x0,0x8(%rax)			;rax + 8 = 0
   0x000000000040102f <+244>:   mov    $0x0,%ebp			;ebp = 0
loop6
   0x0000000000401034 <+249>:   mov    0x8(%rbx),%rax			;rax = rbx + 8
   0x0000000000401038 <+253>:   mov    (%rbx),%edx			;edx = rbx
bp-->   0x000000000040103a <+255>:   cmp    (%rax),%edx			;if edx >= rax, NO BOOM
   0x000000000040103c <+257>:   jge    0x401043 <phase_6+264>
------------------------------------------------------------------
   0x000000000040103e <+259>:   callq  0x4013ff <explode_bomb>
   0x0000000000401043 <+264>:   mov    0x8(%rbx),%rbx
   0x0000000000401047 <+268>:   add    $0x1,%ebp			;ebp + 1
   0x000000000040104a <+271>:   cmp    $0x5,%ebp			;if ebp != 5, go to +249
   0x000000000040104d <+274>:   jne    0x401034 <phase_6+249>		;else FINISH
endloop6

-------------deallocate-------------------------------------------
   0x000000000040104f <+276>:   add    $0x58,%rsp
   0x0000000000401053 <+280>:   pop    %rbx
   0x0000000000401054 <+281>:   pop    %rbp
   0x0000000000401055 <+282>:   pop    %r12
   0x0000000000401057 <+284>:   pop    %r13
   0x0000000000401059 <+286>:   retq




----------------------------------------------------------------------------------------------------------------------------
















Phase 5
----------------------------------------------------------------------------------------------------------------------------


   0x00000000004010a5 <+0>:     sub    $0x18,%rsp
   0x00000000004010a9 <+4>:     lea    0x8(%rsp),%rcx				;arg[2]
   0x00000000004010ae <+9>:     lea    0xc(%rsp),%rdx				;arg[1]
   0x00000000004010b3 <+14>:    mov    $0x4024ea,%esi				;2 numbers %d %d
   0x00000000004010b8 <+19>:    mov    $0x0,%eax				;eax = 0
   0x00000000004010bd <+24>:    callq  0x400ac8 <__isoc99_sscanf@plt>
   0x00000000004010c2 <+29>:    cmp    $0x1,%eax				;if eax > 1, NO BOOM
   0x00000000004010c5 <+32>:    jg     0x4010cc <phase_5+39>
-----------------------------------------------------------------
   0x00000000004010c7 <+34>:    callq  0x4013ff <explode_bomb>
   0x00000000004010cc <+39>:    mov    0xc(%rsp),%eax				;eax = rsp + 12
   0x00000000004010d0 <+43>:    and    $0xf,%eax				;bitwist AND eax w/ 1111 (only keep bottom 4 bits)
   0x00000000004010d3 <+46>:    mov    %eax,0xc(%rsp)
   0x00000000004010d7 <+50>:    cmp    $0xf,%eax				;if eax = b_1111, BOOM
   0x00000000004010da <+53>:    je     0x401109 <phase_5+100>
   0x00000000004010dc <+55>:    mov    $0x0,%ecx				; ecx = 0
   0x00000000004010e1 <+60>:    mov    $0x0,%edx				; edx = 0
   0x00000000004010e6 <+65>:    mov    $0x402440,%esi				; esi = d_10 or c_\n
loop

		;at this point rax/eax = first input number. edx, ecx = 0
		;need 15 iterations
   0x00000000004010eb <+70>:    add    $0x1,%edx				;edx + 1
   0x00000000004010ee <+73>:    cltq   
   0x00000000004010f0 <+75>:    mov    (%rsi,%rax,4),%eax			;eax = 10 + 4*rax
   0x00000000004010f3 <+78>:    add    %eax,%ecx				;ecx + eax

	;when broken out of this loop, ecx needs to equal second input number
   0x00000000004010f5 <+80>:    cmp    $0xf,%eax
   0x00000000004010f8 <+83>:    jne    0x4010eb <phase_5+70>			;if eax != b_1111, go to loop
endloop


   0x00000000004010fa <+85>:    mov    %eax,0xc(%rsp)				;else rsp+0xc = eax
   0x00000000004010fe <+89>:    cmp    $0xf,%edx
   0x0000000000401101 <+92>:    jne    0x401109 <phase_5+100>			;if edx != b_1111, BOOM
   0x0000000000401103 <+94>:    cmp    0x8(%rsp),%ecx				;else if rsp+8 = ecx, finish
   0x0000000000401107 <+98>:    je     0x40110e <phase_5+105>
------------------------------------------------------------------
   0x0000000000401109 <+100>:   callq  0x4013ff <explode_bomb>
   0x000000000040110e <+105>:   add    $0x18,%rsp
   0x0000000000401112 <+109>:   retq
























----------------------------------------------------------------------------------------------------------------------------







Phase 4
----------------------------------------------------------------------------------------------------------------------------


rsp = stack pointer
rcx/ecx = loop counter "this"
rdx = general purpose
rsi/esi = source index pointer
rax/eax = return value of a function call




   0x0000000000401113 <+0>:     sub    $0x18,%rsp				
   0x0000000000401117 <+4>:     lea    0x8(%rsp),%rcx				;arg[2]
   0x000000000040111c <+9>:     lea    0xc(%rsp),%rdx				;arg[1]
   0x0000000000401121 <+14>:    mov    $0x4024ea,%esi				;two input numbers
   0x0000000000401126 <+19>:    mov    $0x0,%eax				;eax = 0
   0x000000000040112b <+24>:    callq  0x400ac8 <__isoc99_sscanf@plt>

   0x0000000000401130 <+29>:    cmp    $0x2,%eax				;if eax != 2, BOOM
   0x0000000000401133 <+32>:    jne    0x401142 <phase_4+47>			;
   0x0000000000401135 <+34>:    mov    0xc(%rsp),%eax				;else eax = rsp + 12
   0x0000000000401139 <+38>:    test   %eax,%eax				;if eax <0, BOOM
   0x000000000040113b <+40>:    js     0x401142 <phase_4+47>			;
   0x000000000040113d <+42>:    cmp    $0xe,%eax				;else if eax > 14, BOOM
   0x0000000000401140 <+45>:    jle    0x401147 <phase_4+52>			;
   0x0000000000401142 <+47>:    callq  0x4013ff <explode_bomb>
   0x0000000000401147 <+52>:    mov    $0xe,%edx				;else edx = 14
   0x000000000040114c <+57>:    mov    $0x0,%esi				;esi = 0
   0x0000000000401151 <+62>:    mov    0xc(%rsp),%edi				;destination index = rsp + 12
   0x0000000000401155 <+66>:    callq  0x400e70 <func4>				;run func4

   0x000000000040115a <+71>:    cmp    $0x7,%eax				;if eax != 7, BOOM
   0x000000000040115d <+74>:    jne    0x401166 <phase_4+83>			;
   0x000000000040115f <+76>:    cmpl   $0x7,0x8(%rsp)				;else if (rsp + 8) = 7, finish
   0x0000000000401164 <+81>:    je     0x40116b <phase_4+88>			;

   0x0000000000401166 <+83>:    callq  0x4013ff <explode_bomb>
   0x000000000040116b <+88>:    add    $0x18,%rsp
   0x000000000040116f <+92>:    retq 













									;loop
   0x0000000000400e70 <+0>:     sub    $0x8,%rsp			;allocate 8 bytes

   0x0000000000400e74 <+4>:     mov    %edx,%eax			;eax = edx - esi
   0x0000000000400e76 <+6>:     sub    %esi,%eax			
   0x0000000000400e78 <+8>:     mov    %eax,%ecx			;ecx = eax
   0x0000000000400e7a <+10>:    shr    $0x1f,%ecx			;logical right-shift. d <-- d>>31 (fill with 0's)
   0x0000000000400e7d <+13>:    lea    (%rcx,%rax,1),%eax		;eax = &(rcx + rax)
   0x0000000000400e80 <+16>:    sar    %eax				;arithmetic right shift (divide by 2) (fill with sign bit)
   0x0000000000400e82 <+18>:    lea    (%rax,%rsi,1),%ecx		;ecx = &(rax + rsi)
   0x0000000000400e85 <+21>:    cmp    %edi,%ecx			;compare edi and ecx
   0x0000000000400e87 <+23>:    jle    0x400e95 <func4+37>		;if signed <=, go to +37
   0x0000000000400e89 <+25>:    lea    -0x1(%rcx),%edx			;edx = &(rcx - 1)
   0x0000000000400e8c <+28>:    callq  0x400e70 <func4>			;go to loop

   0x0000000000400e91 <+33>:    add    %eax,%eax			;eax*2
   0x0000000000400e93 <+35>:    jmp    0x400eaa <func4+58>		;finish
   0x0000000000400e95 <+37>:    mov    $0x0,%eax			;clear eax-----------------avoid this!
   0x0000000000400e9a <+42>:    cmp    %edi,%ecx			;if edi >= ecx, finish
   0x0000000000400e9c <+44>:    jge    0x400eaa <func4+58>		;
   0x0000000000400e9e <+46>:    lea    0x1(%rcx),%esi			;esi = rcx + 1
   0x0000000000400ea1 <+49>:    callq  0x400e70 <func4>			;call function 4
   0x0000000000400ea6 <+54>:    lea    0x1(%rax,%rax,1),%eax		;eax = (2*rax + 1)

   0x0000000000400eaa <+58>:    add    $0x8,%rsp			
   0x0000000000400eae <+62>:    retq 


----------------------------------------------------------------------------------------------------------------------------












Phase 3
----------------------------------------------------------------------------------------------------------------------------



rsp = stack pointer
rcx = loop counter "this"
rdx = general purpose
rsi/esi = source index pointer
rax/eax = return value of a function call




   0x0000000000401170 <+0>:     sub    $0x18,%rsp			;allocate 24 bytes
   0x0000000000401174 <+4>:     lea    0x8(%rsp),%rcx			;rcx = &(rsp + 8)
   0x0000000000401179 <+9>:     lea    0xc(%rsp),%rdx			;rdx = &(rsp + 12)
   0x000000000040117e <+14>:    mov    $0x4024ea,%esi			;source index = 4203754
   0x0000000000401183 <+19>:    mov    $0x0,%eax			;reset eax
   0x0000000000401188 <+24>:    callq  0x400ac8 <__isoc99_sscanf@plt>   ;string to #
   0x000000000040118d <+29>:    cmp    $0x1,%eax			;compare eax to 1
   0x0000000000401190 <+32>:    jg     0x401197 <phase_3+39>		;signed >  go to +39
   0x0000000000401192 <+34>:    callq  0x4013ff <explode_bomb>		;explode
   0x0000000000401197 <+39>:    cmpl   $0x7,0xc(%rsp)			;compare double word (4 bytes) 7 and (rsp + 12)
   0x000000000040119c <+44>:    ja     0x4011e1 <phase_3+113>		;unsigned >  explode
   0x000000000040119e <+46>:    mov    0xc(%rsp),%eax			;eax = *(rsp + 12)
   0x00000000004011a2 <+50>:    jmpq   *0x402400(,%rax,8)		; points to address table, kind of like 'case'
   0x00000000004011a9 <+57>:    mov    $0x1c8,%eax			;eax = 456
   0x00000000004011ae <+62>:    jmp    0x4011eb <phase_3+123>		;jump to +123
   0x00000000004011b0 <+64>:    mov    $0x15b,%eax			;eax = 347
   0x00000000004011b5 <+69>:    jmp    0x4011eb <phase_3+123>		;jump to +123
   0x00000000004011b7 <+71>:    mov    $0x3c6,%eax			;eax = 966
   0x00000000004011bc <+76>:    jmp    0x4011eb <phase_3+123>		;jump to +123
   0x00000000004011be <+78>:    mov    $0x36,%eax			;eax = 54
   0x00000000004011c3 <+83>:    jmp    0x4011eb <phase_3+123>		;jump to +123
   0x00000000004011c5 <+85>:    mov    $0x12f,%eax			;eax = 303
   0x00000000004011ca <+90>:    jmp    0x4011eb <phase_3+123>		;jump to +123
   0x00000000004011cc <+92>:    mov    $0x20a,%eax			;eax = 522
   0x00000000004011d1 <+97>:    jmp    0x4011eb <phase_3+123>		;jump to +123
   0x00000000004011d3 <+99>:    mov    $0x314,%eax			;eax = 788
   0x00000000004011d8 <+104>:   jmp    0x4011eb <phase_3+123>		;jump to +123
   0x00000000004011da <+106>:   mov    $0x3a2,%eax			;eax = 930
   0x00000000004011df <+111>:   jmp    0x4011eb <phase_3+123>		;jump to +123
   0x00000000004011e1 <+113>:   callq  0x4013ff <explode_bomb>		;explode
   0x00000000004011e6 <+118>:   mov    $0x0,%eax			;clear eax
   0x00000000004011eb <+123>:   cmp    0x8(%rsp),%eax			;compare *(rsp + 8) and eax
   0x00000000004011ef <+127>:   je     0x4011f6 <phase_3+134>		;if equal/zero, go to +134
   0x00000000004011f1 <+129>:   callq  0x4013ff <explode_bomb>		;explode
   0x00000000004011f6 <+134>:   add    $0x18,%rsp			;deallocate 24 bytes
   0x00000000004011fa <+138>:   retq 







(gdb) x/16gx 0x402400
0x402400:       0x00000000004011b0(586)      0x00000000004011a9
0x402410:       0x00000000004011b7      0x00000000004011be
0x402420:       0x00000000004011c5      0x00000000004011cc
0x402430:       0x00000000004011d3      0x00000000004011da





4203520

4198656       4864

b0 176
b7 183
c5 197
d3 211
a9 169
be 190
cc 204
da 218









Phase 2
----------------------------------------------------------------------------------------------------------------------------------------

mov s,d     d <-- s

rbp = stack base pointer
rbx = general purpose
rsp = stack pointer
rsi = source index pointer

   0x000000000040105a <+0>:     push   %rbp				;save address of previous stack frame
   0x000000000040105b <+1>:     push   %rbx				;save rbx (8 bytes 1 int) onto stack (rsp-4)
   0x000000000040105c <+2>:     sub    $0x28,%rsp			;subtract 28 from rsp (allocate 40 bytes (5 int's) to memory) rsp is now -48

   0x0000000000401060 <+6>:     mov    %rsp,%rsi			;source index = stack pointer
   0x0000000000401063 <+9>:     callq  0x401435 <read_six_numbers>	;call "read six numbers"
   0x0000000000401068 <+14>:    cmpl   $0x0,(%rsp)			;compare the value stored at rsp to 0
   0x000000000040106c <+18>:    jne    0x401075 <phase_2+27>		;if not equal/not zero,  go to +27 (explode)
   0x000000000040106e <+20>:    cmpl   $0x1,0x4(%rsp)			;else, compare (value_at_rsp + 4) to 1
   0x0000000000401073 <+25>:    je     0x40107a <phase_2+32>		;if equal dont explode
   0x0000000000401075 <+27>:    callq  0x4013ff <explode_bomb>		;explode
   0x000000000040107a <+32>:    mov    %rsp,%rbp			;rbp = rsp
   0x000000000040107d <+35>:    lea    0x8(%rsp),%rbx			;(load effective address) rbx(temp) = rsp + 8
   0x0000000000401082 <+40>:    add    $0x18,%rbp			;add 24 to rbp
   0x0000000000401086 <+44>:    mov    -0x4(%rbx),%eax			;eax = (rbx - 4) + (rbx - 8) (x + (x-1))
   0x0000000000401089 <+47>:    add    -0x8(%rbx),%eax			;
   0x000000000040108c <+50>:    cmp    %eax,(%rbx)			;compare eax & value@rbx
   0x000000000040108e <+52>:    je     0x401095 <phase_2+59>		;if equal, go to +59
   0x0000000000401090 <+54>:    callq  0x4013ff <explode_bomb>		;else explode
   0x0000000000401095 <+59>:    add    $0x4,%rbx			;add 4 to rbx
   0x0000000000401099 <+63>:    cmp    %rbp,%rbx			;compare rbp and rbx
   0x000000000040109c <+66>:    jne    0x401086 <phase_2+44>		;if not equal, go to +44

   0x000000000040109e <+68>:    add    $0x28,%rsp			;else add 28 to rsp (deallocate 40 bytes)
   0x00000000004010a2 <+72>:    pop    %rbx				;deallocate memory
   0x00000000004010a3 <+73>:    pop    %rbp				;deallocate memory
   0x00000000004010a4 <+74>:    retq 






rsp = stack pointer
rsi = source index pointer
rdx = general purpose
rcx = loop counter "this"
rax = return value of a function call
esi = bytes 0-3 of rsi

   0x0000000000401435 <+0>:     sub    $0x18,%rsp			;stack ptr = rsp - 24 (3 bytes) rsp = -72

   0x0000000000401439 <+4>:     mov    %rsi,%rdx			;rdx = *rsi (-48)
   0x000000000040143c <+7>:     lea    0x4(%rsi),%rcx			;rcx = &rsi + 4 (-44)
   0x0000000000401440 <+11>:    lea    0x14(%rsi),%rax			;rax = &rsi + d_20 (-28)
   0x0000000000401444 <+15>:    mov    %rax,0x8(%rsp)			;rsp + 8 = *rax (*r[-28])
   0x0000000000401449 <+20>:    lea    0x10(%rsi),%rax			;rax = &rsi + d_16 (-24)
   0x000000000040144d <+24>:    mov    %rax,(%rsp)			;*rsp = rax (*r[-24])
   0x0000000000401451 <+28>:    lea    0xc(%rsi),%r9			;r9 = &rsi + d_12 (-60)
   0x0000000000401455 <+32>:    lea    0x8(%rsi),%r8			;r8 = &rsi + d_8 (-64)
   0x0000000000401459 <+36>:    mov    $0x4024de,%esi			; esi = $0x4024de (source is that location)
   0x000000000040145e <+41>:    mov    $0x0,%eax			;clear eax
   0x0000000000401463 <+46>:    callq  0x400ac8 <__isoc99_sscanf@plt>	;call function (load eax?)
   0x0000000000401468 <+51>:    cmp    $0x5,%eax			;compare 5 & eax (eax - 5)
   0x000000000040146b <+54>:    jg     0x401472 <read_six_numbers+61>	;if (signed >), go to +61
   0x000000000040146d <+56>:    callq  0x4013ff <explode_bomb>		;else explode

   0x0000000000401472 <+61>:    add    $0x18,%rsp			;rsp = rsp + 24 (deallocate)
   0x0000000000401476 <+65>:    retq  























































0000000000401376 <phase_defused>:
  401376:       48 83 ec 68             sub    $0x68,%rsp
  40137a:       bf 01 00 00 00          mov    $0x1,%edi
  40137f:       e8 30 ff ff ff          callq  4012b4 <send_msg>
  401384:       83 3d 9d 25 20 00 06    cmpl   $0x6,0x20259d(%rip)        # 603928 <num_input_strings>
  40138b:       75 6d                   jne    4013fa <phase_defused+0x84>
  40138d:       48 8d 4c 24 08          lea    0x8(%rsp),%rcx
  401392:       48 8d 54 24 0c          lea    0xc(%rsp),%rdx
  401397:       4c 8d 44 24 10          lea    0x10(%rsp),%r8
  40139c:       be ae 24 40 00          mov    $0x4024ae,%esi
  4013a1:       bf 30 3a 60 00          mov    $0x603a30,%edi
  4013a6:       b8 00 00 00 00          mov    $0x0,%eax
  4013ab:       e8 18 f7 ff ff          callq  400ac8 <__isoc99_sscanf@plt>
  4013b0:       83 f8 03                cmp    $0x3,%eax
  4013b3:       75 31                   jne    4013e6 <phase_defused+0x70>
  4013b5:       48 8d 7c 24 10          lea    0x10(%rsp),%rdi
  4013ba:       be b7 24 40 00          mov    $0x4024b7,%esi
  4013bf:       e8 78 fe ff ff          callq  40123c <strings_not_equal>
  4013c4:       85 c0                   test   %eax,%eax
  4013c6:       75 1e                   jne    4013e6 <phase_defused+0x70>
  4013c8:       bf 10 26 40 00          mov    $0x402610,%edi
  4013cd:       e8 e6 f6 ff ff          callq  400ab8 <puts@plt>
  4013d2:       bf 38 26 40 00          mov    $0x402638,%edi
  4013d7:       e8 dc f6 ff ff          callq  400ab8 <puts@plt>
  4013dc:       b8 00 00 00 00          mov    $0x0,%eax
  4013e1:       e8 05 fb ff ff          callq  400eeb <secret_phase>
  4013e6:       bf 70 26 40 00          mov    $0x402670,%edi
  4013eb:       e8 c8 f6 ff ff          callq  400ab8 <puts@plt>
  4013f0:       bf a0 26 40 00          mov    $0x4026a0,%edi
  4013f5:       e8 be f6 ff ff          callq  400ab8 <puts@plt>
  4013fa:       48 83 c4 68             add    $0x68,%rsp
  4013fe:       c3                      retq  

----------------------------------------------------------------------------------------------------------------------------------